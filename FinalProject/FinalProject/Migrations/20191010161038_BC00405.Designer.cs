// <auto-generated />
using System;
using FinalProject.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinalProject.Migrations
{
    [DbContext(typeof(FinalProject_Db))]
    [Migration("20191010161038_BC00405")]
    partial class BC00405
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalProject.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("AnnouncementCount");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("CityId");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(370);

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsVip");

                    b.Property<int>("ModelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("ModelId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new { Id = 1, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 1, Info = " 64gb  Yaxshi veziyyetdedir", IsConfirmed = true, IsVip = false, ModelId = 3, Name = "Satilir Xiaomi Mi A2", PhotoUrl = "adsMain.jpg", Price = 1200m },
                        new { Id = 2, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 8, Info = "Satilir samsung galaxy s10 128 gb yasil reng.", IsConfirmed = false, IsVip = false, ModelId = 10, Name = "Satilir Samsung Galaxy S10", PhotoUrl = "s10.jpg", Price = 1400m },
                        new { Id = 3, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 52, Info = "Huawei P30 pro. Ideal veziyyetdedir...", IsConfirmed = false, IsVip = false, ModelId = 24, Name = "Satilir Huawei P30 Pro", PhotoUrl = "huaweiP30Proo.jpg", Price = 1350m },
                        new { Id = 4, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 1, Info = "Ela veziyyetdir 32gb, Qiymetde Cuzi Endirim Olacaq", IsConfirmed = true, IsVip = false, ModelId = 48, Name = "Satilir Samsung Tab E", PhotoUrl = "samsungTabE.jpg", Price = 450m },
                        new { Id = 5, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 8, Info = "Ipad pro 2018 her bir aksesuari var..", IsConfirmed = false, IsVip = false, ModelId = 44, Name = "Satilir Ipad Pro 2018", PhotoUrl = "ipadPro.jpg", Price = 960m },
                        new { Id = 6, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 52, Info = "Keyfiyyetli plansetdir nomre(4g) destekleyir", IsConfirmed = false, IsVip = false, ModelId = 55, Name = "Satilir Lenovo Tab 4", PhotoUrl = "lenovoTab.jpg", Price = 1350m },
                        new { Id = 7, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 1, Info = "Acer swift 3 14 ekran ram 8 videokarti intel uhd620 1.8Ghz up to 4.0 Ghz", IsConfirmed = true, IsVip = false, ModelId = 78, Name = "Satilir Acer Swift 3", PhotoUrl = "swift3.jpg", Price = 2100m },
                        new { Id = 8, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 8, Info = "Ram 16gb videocarti geforce gtx 1050ti 4gb", IsConfirmed = false, IsVip = false, ModelId = 98, Name = "Satilir Hp Omen", PhotoUrl = "hpOmen.jpg", Price = 2300m },
                        new { Id = 9, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 52, Info = "G3 ram 16gb ssd 256 videocarti 6gb geforce gtx 1060", IsConfirmed = false, IsVip = false, ModelId = 94, Name = "Satilir Dell G3", PhotoUrl = "dellG3.jpg", Price = 1750m },
                        new { Id = 10, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 1, Info = "104 ekran, Uhd,yeni kimidir", IsConfirmed = true, IsVip = false, ModelId = 127, Name = "Satilir Panasonic 4k", PhotoUrl = "sonyTv.jpg", Price = 2100m },
                        new { Id = 11, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 8, Info = "120 ekran,Uhd, qiymetde razilawmaq olar", IsConfirmed = false, IsVip = false, ModelId = 114, Name = "Satilir Sony QHD", PhotoUrl = "panasonicTv.jpg", Price = 2300m },
                        new { Id = 12, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 52, Info = "Lg 104 ekran, Qhd, yeni nesil televizor, Yenidir! qiymet sondur", IsConfirmed = false, IsVip = false, ModelId = 112, Name = "Satilir Lg UHD ", PhotoUrl = "lgTv.jpg", Price = 1750m },
                        new { Id = 13, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 1, Info = "", IsConfirmed = false, IsVip = false, ModelId = 128, Name = "Satilir Apple Watch 4", PhotoUrl = "appleWatch.jpg", Price = 2100m },
                        new { Id = 14, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 8, Info = "", IsConfirmed = false, IsVip = false, ModelId = 135, Name = "Satilir Samsung Watch Active", PhotoUrl = "samsungWatch.jpg", Price = 2300m },
                        new { Id = 15, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), AnnouncementCount = 0, CityId = 52, Info = "", IsConfirmed = false, IsVip = false, ModelId = 139, Name = "Satilir Xiaomi Mi Band 4 ", PhotoUrl = "XiaomiWatch.jpg", Price = 1750m }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.AnsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdsPhotoUrl");

                    b.Property<int>("AnnouncementId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnsImages");

                    b.HasData(
                        new { Id = 1, AdsPhotoUrl = "ads4.jpg", AnnouncementId = 1 },
                        new { Id = 2, AdsPhotoUrl = "ads3.jpg", AnnouncementId = 1 },
                        new { Id = 3, AdsPhotoUrl = "ads2.jpg", AnnouncementId = 1 },
                        new { Id = 4, AdsPhotoUrl = "ads1.jpg", AnnouncementId = 1 },
                        new { Id = 5, AdsPhotoUrl = "s10.jpg", AnnouncementId = 2 },
                        new { Id = 6, AdsPhotoUrl = "s10.jpg", AnnouncementId = 2 },
                        new { Id = 7, AdsPhotoUrl = "s10.jpg", AnnouncementId = 2 },
                        new { Id = 8, AdsPhotoUrl = "s10.jpg", AnnouncementId = 2 },
                        new { Id = 9, AdsPhotoUrl = "huaweiP30Proo.jpg", AnnouncementId = 3 },
                        new { Id = 10, AdsPhotoUrl = "huaweiP30Proo.jpg", AnnouncementId = 3 },
                        new { Id = 11, AdsPhotoUrl = "huaweiP30Proo.jpg", AnnouncementId = 3 },
                        new { Id = 12, AdsPhotoUrl = "huaweiP30Proo.jpg", AnnouncementId = 3 },
                        new { Id = 13, AdsPhotoUrl = "samsungTabE.jpg", AnnouncementId = 4 },
                        new { Id = 14, AdsPhotoUrl = "samsungTabE.jpg", AnnouncementId = 4 },
                        new { Id = 15, AdsPhotoUrl = "samsungTabE.jpg", AnnouncementId = 4 },
                        new { Id = 16, AdsPhotoUrl = "samsungTabE.jpg", AnnouncementId = 4 },
                        new { Id = 17, AdsPhotoUrl = "ipadPro.jpg", AnnouncementId = 5 },
                        new { Id = 18, AdsPhotoUrl = "ipadPro.jpg", AnnouncementId = 5 },
                        new { Id = 19, AdsPhotoUrl = "ipadPro.jpg", AnnouncementId = 5 },
                        new { Id = 20, AdsPhotoUrl = "ipadPro.jpg", AnnouncementId = 5 },
                        new { Id = 21, AdsPhotoUrl = "lenovoTab.jpg", AnnouncementId = 6 },
                        new { Id = 22, AdsPhotoUrl = "lenovoTab.jpg", AnnouncementId = 6 },
                        new { Id = 23, AdsPhotoUrl = "lenovoTab.jpg", AnnouncementId = 6 },
                        new { Id = 24, AdsPhotoUrl = "lenovoTab.jpg", AnnouncementId = 6 },
                        new { Id = 25, AdsPhotoUrl = "swift3.jpg", AnnouncementId = 7 },
                        new { Id = 26, AdsPhotoUrl = "swift3.jpg", AnnouncementId = 7 },
                        new { Id = 27, AdsPhotoUrl = "swift3.jpg", AnnouncementId = 7 },
                        new { Id = 28, AdsPhotoUrl = "swift3.jpg", AnnouncementId = 7 },
                        new { Id = 29, AdsPhotoUrl = "hpOmen.jpg", AnnouncementId = 8 },
                        new { Id = 30, AdsPhotoUrl = "hpOmen.jpg", AnnouncementId = 8 },
                        new { Id = 31, AdsPhotoUrl = "hpOmen.jpg", AnnouncementId = 8 },
                        new { Id = 32, AdsPhotoUrl = "hpOmen.jpg", AnnouncementId = 8 },
                        new { Id = 33, AdsPhotoUrl = "dellG3.jpg", AnnouncementId = 9 },
                        new { Id = 34, AdsPhotoUrl = "dellG3.jpg", AnnouncementId = 9 },
                        new { Id = 35, AdsPhotoUrl = "dellG3.jpg", AnnouncementId = 9 },
                        new { Id = 36, AdsPhotoUrl = "dellG3.jpg", AnnouncementId = 9 },
                        new { Id = 37, AdsPhotoUrl = "sonyTv.jpg", AnnouncementId = 10 },
                        new { Id = 38, AdsPhotoUrl = "sonyTv.jpg", AnnouncementId = 10 },
                        new { Id = 39, AdsPhotoUrl = "sonyTv.jpg", AnnouncementId = 10 },
                        new { Id = 40, AdsPhotoUrl = "sonyTv.jpg", AnnouncementId = 10 },
                        new { Id = 41, AdsPhotoUrl = "panasonicTv.jpg", AnnouncementId = 11 },
                        new { Id = 42, AdsPhotoUrl = "panasonicTv.jpg", AnnouncementId = 11 },
                        new { Id = 43, AdsPhotoUrl = "panasonicTv.jpg", AnnouncementId = 11 },
                        new { Id = 44, AdsPhotoUrl = "panasonicTv.jpg", AnnouncementId = 11 },
                        new { Id = 45, AdsPhotoUrl = "lgTv.jpg", AnnouncementId = 12 },
                        new { Id = 46, AdsPhotoUrl = "lgTv.jpg", AnnouncementId = 12 },
                        new { Id = 47, AdsPhotoUrl = "lgTv.jpg", AnnouncementId = 12 },
                        new { Id = 48, AdsPhotoUrl = "lgTv.jpg", AnnouncementId = 12 },
                        new { Id = 49, AdsPhotoUrl = "appleWatch.jpg", AnnouncementId = 13 },
                        new { Id = 50, AdsPhotoUrl = "appleWatch.jpg", AnnouncementId = 13 },
                        new { Id = 51, AdsPhotoUrl = "appleWatch.jpg", AnnouncementId = 13 },
                        new { Id = 52, AdsPhotoUrl = "appleWatch.jpg", AnnouncementId = 13 },
                        new { Id = 53, AdsPhotoUrl = "samsungWatch.jpg", AnnouncementId = 14 },
                        new { Id = 54, AdsPhotoUrl = "samsungWatch.jpg", AnnouncementId = 14 },
                        new { Id = 55, AdsPhotoUrl = "samsungWatch.jpg", AnnouncementId = 14 },
                        new { Id = 56, AdsPhotoUrl = "samsungWatch.jpg", AnnouncementId = 14 },
                        new { Id = 57, AdsPhotoUrl = "XiaomiWatch.jpg", AnnouncementId = 15 },
                        new { Id = 58, AdsPhotoUrl = "XiaomiWatch.jpg", AnnouncementId = 15 },
                        new { Id = 59, AdsPhotoUrl = "XiaomiWatch.jpg", AnnouncementId = 15 },
                        new { Id = 60, AdsPhotoUrl = "XiaomiWatch.jpg", AnnouncementId = 15 }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lastname")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OperatorId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoUrl");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OperatorId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinalProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Name = "Telefon" },
                        new { Id = 2, Name = "Planşet" },
                        new { Id = 3, Name = "Notbuk" },
                        new { Id = 4, Name = "Televizor" },
                        new { Id = 5, Name = "SmartWatch" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, Name = "Abşeron" },
                        new { Id = 2, Name = "Ağcabədi" },
                        new { Id = 3, Name = "Ağdam" },
                        new { Id = 4, Name = "Ağdaş" },
                        new { Id = 5, Name = "Ağstafa" },
                        new { Id = 6, Name = "Ağsu" },
                        new { Id = 7, Name = "Astara" },
                        new { Id = 8, Name = "Bakı" },
                        new { Id = 9, Name = "Balakən" },
                        new { Id = 10, Name = "Beyləqan" },
                        new { Id = 11, Name = "Bərdə" },
                        new { Id = 12, Name = "Biləsuvar" },
                        new { Id = 13, Name = "Cəbrayıl" },
                        new { Id = 14, Name = "Cəlilabad" },
                        new { Id = 15, Name = "Daşkəsən" },
                        new { Id = 16, Name = "Füzuli" },
                        new { Id = 17, Name = "Gədəbəy" },
                        new { Id = 18, Name = "Gəncə" },
                        new { Id = 19, Name = "Goranboy" },
                        new { Id = 20, Name = "Göyçay" },
                        new { Id = 21, Name = "Göygöl" },
                        new { Id = 22, Name = "Hacıqabul" },
                        new { Id = 23, Name = "Xaçmaz" },
                        new { Id = 24, Name = "Xankəndi" },
                        new { Id = 25, Name = "Xızı" },
                        new { Id = 26, Name = "Xocalı" },
                        new { Id = 27, Name = "Xocavənd" },
                        new { Id = 28, Name = "İmişli" },
                        new { Id = 29, Name = "İsmayıllı" },
                        new { Id = 30, Name = "Kəlbəcər" },
                        new { Id = 31, Name = "Kürdəmir" },
                        new { Id = 32, Name = "Qax" },
                        new { Id = 33, Name = "Qazax" },
                        new { Id = 34, Name = "Qəbələ" },
                        new { Id = 35, Name = "Qobustan" },
                        new { Id = 36, Name = "Quba" },
                        new { Id = 37, Name = "Qubadlı" },
                        new { Id = 38, Name = "Qusar" },
                        new { Id = 39, Name = "Laçın" },
                        new { Id = 40, Name = "Lerik" },
                        new { Id = 41, Name = "Lənkəran" },
                        new { Id = 42, Name = "Masallı" },
                        new { Id = 43, Name = "Mingəçevir" },
                        new { Id = 44, Name = "Naftalan" },
                        new { Id = 45, Name = "Neftçala" },
                        new { Id = 46, Name = "Oğuz" },
                        new { Id = 47, Name = "Saatlı" },
                        new { Id = 48, Name = "Sabirabad" },
                        new { Id = 49, Name = "Salyan" },
                        new { Id = 50, Name = "Samux" },
                        new { Id = 51, Name = "Siyəzən" },
                        new { Id = 52, Name = "Sumqayıt" },
                        new { Id = 53, Name = "Şabran" },
                        new { Id = 54, Name = "Şamaxı" },
                        new { Id = 55, Name = "Şirvan" },
                        new { Id = 56, Name = "Şəki" },
                        new { Id = 57, Name = "Şəmkir" },
                        new { Id = 58, Name = "Şuşa" },
                        new { Id = 59, Name = "Tərtər" },
                        new { Id = 60, Name = "Tovuz" },
                        new { Id = 61, Name = "Ucar" },
                        new { Id = 62, Name = "Yardımlı" },
                        new { Id = 63, Name = "Yevlax" },
                        new { Id = 64, Name = "Zaqatala" },
                        new { Id = 65, Name = "Zəngilan" },
                        new { Id = 66, Name = "Zərdab" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Marks");

                    b.HasData(
                        new { Id = 1, CategoryId = 1, Name = "Apple" },
                        new { Id = 2, CategoryId = 1, Name = "Samsung" },
                        new { Id = 3, CategoryId = 1, Name = "Xiaomi" },
                        new { Id = 4, CategoryId = 1, Name = "Huawei" },
                        new { Id = 5, CategoryId = 1, Name = "Honor" },
                        new { Id = 6, CategoryId = 1, Name = "Htc" },
                        new { Id = 7, CategoryId = 1, Name = "Sony" },
                        new { Id = 8, CategoryId = 2, Name = "Apple" },
                        new { Id = 9, CategoryId = 2, Name = "Samsung" },
                        new { Id = 10, CategoryId = 2, Name = "Lenovo" },
                        new { Id = 11, CategoryId = 2, Name = "Huawei" },
                        new { Id = 12, CategoryId = 2, Name = "Acer" },
                        new { Id = 13, CategoryId = 3, Name = "Apple" },
                        new { Id = 14, CategoryId = 3, Name = "Microsoft" },
                        new { Id = 15, CategoryId = 3, Name = "Acer" },
                        new { Id = 16, CategoryId = 3, Name = "Lenovo" },
                        new { Id = 17, CategoryId = 3, Name = "Asus" },
                        new { Id = 18, CategoryId = 3, Name = "Dell" },
                        new { Id = 19, CategoryId = 3, Name = "Hp" },
                        new { Id = 20, CategoryId = 4, Name = "Hoffmann" },
                        new { Id = 21, CategoryId = 4, Name = "Lg" },
                        new { Id = 22, CategoryId = 4, Name = "Panasonic" },
                        new { Id = 23, CategoryId = 4, Name = "Samsung" },
                        new { Id = 24, CategoryId = 4, Name = "Sony" },
                        new { Id = 25, CategoryId = 5, Name = "Apple" },
                        new { Id = 26, CategoryId = 5, Name = "Samsung" },
                        new { Id = 27, CategoryId = 5, Name = "Xiaomi" },
                        new { Id = 28, CategoryId = 5, Name = "Huawei" },
                        new { Id = 29, CategoryId = 5, Name = "Honor" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarkId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Models");

                    b.HasData(
                        new { Id = 1, MarkId = 1, Name = "X" },
                        new { Id = 2, MarkId = 1, Name = "XS" },
                        new { Id = 3, MarkId = 1, Name = "XS Max" },
                        new { Id = 4, MarkId = 1, Name = "11" },
                        new { Id = 5, MarkId = 1, Name = "11 Pro" },
                        new { Id = 6, MarkId = 1, Name = "11 Pro Max " },
                        new { Id = 7, MarkId = 2, Name = "Galaxy Note 5" },
                        new { Id = 8, MarkId = 2, Name = "Galaxy Note 7" },
                        new { Id = 9, MarkId = 2, Name = "Galaxy Note 8" },
                        new { Id = 10, MarkId = 2, Name = "Galaxy Note 9" },
                        new { Id = 11, MarkId = 2, Name = "Galaxy S6" },
                        new { Id = 12, MarkId = 2, Name = "Galaxy S7" },
                        new { Id = 13, MarkId = 3, Name = "Mi A2 Lite" },
                        new { Id = 14, MarkId = 3, Name = "Mi A2" },
                        new { Id = 15, MarkId = 3, Name = "Mi A3" },
                        new { Id = 16, MarkId = 3, Name = "Redmi Note 4" },
                        new { Id = 17, MarkId = 3, Name = "Redmi Note 5" },
                        new { Id = 18, MarkId = 3, Name = "Redmi Note 7" },
                        new { Id = 19, MarkId = 4, Name = "Mate 20 Lite" },
                        new { Id = 20, MarkId = 4, Name = "Mate 20" },
                        new { Id = 21, MarkId = 4, Name = "Mate 20 Pro " },
                        new { Id = 22, MarkId = 4, Name = "P20 Pro" },
                        new { Id = 23, MarkId = 4, Name = "P30 Lite" },
                        new { Id = 24, MarkId = 4, Name = "P30 Pro" },
                        new { Id = 25, MarkId = 5, Name = "7A" },
                        new { Id = 26, MarkId = 5, Name = "8S" },
                        new { Id = 27, MarkId = 5, Name = "9 Lite " },
                        new { Id = 28, MarkId = 5, Name = "10 Lite" },
                        new { Id = 29, MarkId = 5, Name = "8X" },
                        new { Id = 30, MarkId = 5, Name = "10" },
                        new { Id = 31, MarkId = 6, Name = "Desire 630 Dual" },
                        new { Id = 32, MarkId = 6, Name = "U Play" },
                        new { Id = 33, MarkId = 6, Name = "Desire 530 " },
                        new { Id = 34, MarkId = 6, Name = "One M8" },
                        new { Id = 35, MarkId = 6, Name = "One M9" },
                        new { Id = 36, MarkId = 6, Name = "One M10" },
                        new { Id = 37, MarkId = 7, Name = "Xperia Z" },
                        new { Id = 38, MarkId = 7, Name = "Xperia Z1" },
                        new { Id = 39, MarkId = 7, Name = "Xperia Z2 " },
                        new { Id = 40, MarkId = 7, Name = "Xperia Z3" },
                        new { Id = 41, MarkId = 7, Name = "Xperira Z5" },
                        new { Id = 42, MarkId = 7, Name = "Xpeira XZ" },
                        new { Id = 43, MarkId = 8, Name = "iPad 6" },
                        new { Id = 44, MarkId = 8, Name = "iPad Pro 2018" },
                        new { Id = 45, MarkId = 8, Name = "iPad Air 2019" },
                        new { Id = 46, MarkId = 8, Name = "iPad Mini 2019" },
                        new { Id = 47, MarkId = 8, Name = "iPad Pro 2019" },
                        new { Id = 48, MarkId = 9, Name = "Tab E 8.1" },
                        new { Id = 49, MarkId = 9, Name = "Tab E 10.1" },
                        new { Id = 50, MarkId = 9, Name = "Tab A 7.1" },
                        new { Id = 51, MarkId = 9, Name = "Tab A 8.1" },
                        new { Id = 52, MarkId = 9, Name = "Tab A 10.1" },
                        new { Id = 53, MarkId = 10, Name = "Tab E 10" },
                        new { Id = 54, MarkId = 10, Name = "Tab 10" },
                        new { Id = 55, MarkId = 10, Name = "Tab 4" },
                        new { Id = 56, MarkId = 10, Name = "Tab TB 7104" },
                        new { Id = 57, MarkId = 10, Name = "Tab E10 TB" },
                        new { Id = 58, MarkId = 11, Name = "Tab E 10" },
                        new { Id = 59, MarkId = 11, Name = "Tab 10" },
                        new { Id = 60, MarkId = 11, Name = "Tab 4" },
                        new { Id = 61, MarkId = 11, Name = "Tab TB 7104" },
                        new { Id = 62, MarkId = 11, Name = "Tab E10 TB" },
                        new { Id = 63, MarkId = 12, Name = "M5 Lite 32Gb" },
                        new { Id = 64, MarkId = 12, Name = "M5 64gb" },
                        new { Id = 65, MarkId = 12, Name = "MediaPad T5 2+16gb" },
                        new { Id = 66, MarkId = 12, Name = "MediaPad T5 3+32gb" },
                        new { Id = 67, MarkId = 12, Name = "MediaPad T5 4+64gb" },
                        new { Id = 68, MarkId = 13, Name = "MacBook Air 13″ MRE82" },
                        new { Id = 69, MarkId = 13, Name = "Macbook Pro 13″ MR9Q2" },
                        new { Id = 70, MarkId = 13, Name = "MacBook Air 13″ MREE2" },
                        new { Id = 71, MarkId = 13, Name = "Macbook Pro 13″ MV962" },
                        new { Id = 72, MarkId = 13, Name = "MacBook Pro 15″ MR932" },
                        new { Id = 73, MarkId = 14, Name = "Surface 4 Pro" },
                        new { Id = 74, MarkId = 14, Name = "Surface 5 Pro" },
                        new { Id = 75, MarkId = 14, Name = "Surface 6 Pro" },
                        new { Id = 76, MarkId = 14, Name = "Surface Book" },
                        new { Id = 77, MarkId = 14, Name = "Surface Pro Book" },
                        new { Id = 78, MarkId = 15, Name = "Swift 3 SF-314" },
                        new { Id = 79, MarkId = 15, Name = "Swift 3 SF-315" },
                        new { Id = 80, MarkId = 15, Name = "Predator Helios 300" },
                        new { Id = 81, MarkId = 15, Name = "Predator Helios 700" },
                        new { Id = 82, MarkId = 15, Name = "Swift 5 SF-314ur" },
                        new { Id = 83, MarkId = 16, Name = "IdeaPad 110" },
                        new { Id = 84, MarkId = 16, Name = "IP330" },
                        new { Id = 85, MarkId = 16, Name = "IdeaPad 320" },
                        new { Id = 86, MarkId = 16, Name = "IP 340" },
                        new { Id = 87, MarkId = 16, Name = "Lenovo ThinkPad" },
                        new { Id = 88, MarkId = 17, Name = "Zenbook 13.3" },
                        new { Id = 89, MarkId = 17, Name = "Zenbook 14" },
                        new { Id = 90, MarkId = 17, Name = "Zenbook 15" },
                        new { Id = 91, MarkId = 17, Name = "Vivobook 13.3" },
                        new { Id = 92, MarkId = 17, Name = "Vivobook 14" },
                        new { Id = 93, MarkId = 18, Name = "AlianWare" },
                        new { Id = 94, MarkId = 18, Name = "G3" },
                        new { Id = 95, MarkId = 18, Name = "G3 Pro" },
                        new { Id = 96, MarkId = 18, Name = "5587-6588" },
                        new { Id = 97, MarkId = 18, Name = "3579-8973" },
                        new { Id = 98, MarkId = 19, Name = "15-ra047ur" },
                        new { Id = 99, MarkId = 19, Name = "15-ra059ur-3qu42ea" },
                        new { Id = 100, MarkId = 19, Name = "15-ra047ur" },
                        new { Id = 101, MarkId = 19, Name = "250-G6" },
                        new { Id = 102, MarkId = 19, Name = "250-G7" },
                        new { Id = 103, MarkId = 20, Name = "LED 40A3500" },
                        new { Id = 104, MarkId = 20, Name = "LED 32A3500" },
                        new { Id = 105, MarkId = 20, Name = "LED 65R7" },
                        new { Id = 106, MarkId = 20, Name = "LED 55A3500" },
                        new { Id = 107, MarkId = 20, Name = "LED 49E3400" },
                        new { Id = 108, MarkId = 21, Name = "LED 43LM6500" },
                        new { Id = 109, MarkId = 21, Name = "LED 32LM6350" },
                        new { Id = 110, MarkId = 21, Name = "OLED 65B9" },
                        new { Id = 111, MarkId = 21, Name = "OLED 55B9PLA" },
                        new { Id = 112, MarkId = 21, Name = "LED 55UM7450" },
                        new { Id = 113, MarkId = 22, Name = "LED TX-65GXR900" },
                        new { Id = 114, MarkId = 22, Name = "LED TX-40FSR500" },
                        new { Id = 115, MarkId = 22, Name = "LED TX-32DR400" },
                        new { Id = 116, MarkId = 22, Name = "LED TX-55FXR740" },
                        new { Id = 117, MarkId = 22, Name = "LED TX-49FXR740" },
                        new { Id = 118, MarkId = 23, Name = "LED UE55RU7300UXRU" },
                        new { Id = 119, MarkId = 23, Name = "LED QE55Q67RAUXRU" },
                        new { Id = 120, MarkId = 23, Name = "LED UE55RU7140UXRU" },
                        new { Id = 121, MarkId = 23, Name = "LED UE43RU7470UXRU" },
                        new { Id = 122, MarkId = 23, Name = "LED QE65Q9FNAUXRU" },
                        new { Id = 123, MarkId = 24, Name = "KD-85XF8596 RU3" },
                        new { Id = 124, MarkId = 24, Name = "KD-65XF7096 RU3" },
                        new { Id = 125, MarkId = 24, Name = "KD-49XF7596" },
                        new { Id = 126, MarkId = 24, Name = "KD-43XF7096" },
                        new { Id = 127, MarkId = 24, Name = "KDL-43WF665" },
                        new { Id = 128, MarkId = 25, Name = "Watch 3 42mm" },
                        new { Id = 129, MarkId = 25, Name = "Watch 3 44mm" },
                        new { Id = 130, MarkId = 25, Name = "Watch 4 42mm" },
                        new { Id = 131, MarkId = 25, Name = "Watch 4 44mm" },
                        new { Id = 132, MarkId = 25, Name = "Watch 4 40mm" },
                        new { Id = 133, MarkId = 26, Name = "Galaxy Fit" },
                        new { Id = 134, MarkId = 26, Name = "Galaxy Fit e" },
                        new { Id = 135, MarkId = 26, Name = "Galaxy Watch SM-R800" },
                        new { Id = 136, MarkId = 26, Name = "Galaxy Watch Active SM-R500" },
                        new { Id = 137, MarkId = 26, Name = "Galaxy Watch SM-R810" },
                        new { Id = 138, MarkId = 27, Name = "Amazfit GTR" },
                        new { Id = 139, MarkId = 27, Name = "Mi Band 4" },
                        new { Id = 140, MarkId = 27, Name = "Amazfit Verge" },
                        new { Id = 141, MarkId = 27, Name = "Amazfit Stratos" },
                        new { Id = 142, MarkId = 27, Name = "Amazfit Bip" },
                        new { Id = 143, MarkId = 28, Name = "Band 3e" },
                        new { Id = 144, MarkId = 28, Name = "Watch GT" },
                        new { Id = 145, MarkId = 28, Name = "Band 3" },
                        new { Id = 146, MarkId = 28, Name = "Watch GT2" },
                        new { Id = 147, MarkId = 28, Name = "Band 4e" },
                        new { Id = 148, MarkId = 29, Name = "Watch Magic" },
                        new { Id = 149, MarkId = 29, Name = "5 CRS" },
                        new { Id = 150, MarkId = 29, Name = "Band 5" },
                        new { Id = 151, MarkId = 29, Name = "Band 3" },
                        new { Id = 152, MarkId = 29, Name = "Band 4" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(370);

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new { Id = 1, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 38, DateTimeKind.Local), Info = "Sürətli enerji yığma illərdir Android istifadəçiləri üçün daha əlçatan olsa da, artıq iphone 11 Pro və Pro Max istifadəçiləri", PhotoUrl = "iphone11pro.jpg", Title = "Iphone 11PRO MAX" },
                        new { Id = 2, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), Info = "Galaxy Note 10 modelləri böyük həcmli batareyalara sahib olacaqlar. ", PhotoUrl = "samsungNote10.jpg", Title = "Samsung Galaxy Note10" },
                        new { Id = 3, AddDate = new DateTime(2019, 10, 10, 20, 10, 38, 39, DateTimeKind.Local), Info = "Beləliklə hər iki smartfon modeli (P30 və P30 Pro) ön kamera üçün nəzərdə tutulmuş damcı formalı çıxıntı hissə ilə təchiz olunacaq.", PhotoUrl = "huaweiP30pro.jpg", Title = "Huawei P30 Pro" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OperatorNumber");

                    b.HasKey("Id");

                    b.ToTable("Operators");

                    b.HasData(
                        new { Id = 1, OperatorNumber = "050" },
                        new { Id = 2, OperatorNumber = "051" },
                        new { Id = 3, OperatorNumber = "055" },
                        new { Id = 4, OperatorNumber = "070" },
                        new { Id = 5, OperatorNumber = "077" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinalProject.Models.Announcement", b =>
                {
                    b.HasOne("FinalProject.Models.ApplicationUser", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FinalProject.Models.City", "City")
                        .WithMany("Announcements")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Model", "Model")
                        .WithMany("Announcements")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.AnsImages", b =>
                {
                    b.HasOne("FinalProject.Models.Announcement", "Announcement")
                        .WithMany("AnsImages")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.ApplicationUser", b =>
                {
                    b.HasOne("FinalProject.Models.Operator", "Operator")
                        .WithMany("Users")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.Mark", b =>
                {
                    b.HasOne("FinalProject.Models.Category", "Category")
                        .WithMany("Marks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.Model", b =>
                {
                    b.HasOne("FinalProject.Models.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
